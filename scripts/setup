#!/bin/bash

set -e
cd $(dirname $0)/..

if ! [ -x "$(command -v curl)" ]; then
  echo "Error: curl is not installed, but the setup script relies on it."
  echo "on debian based operating systems try following command:"
  echo "  $ sudo apt-get install curl"
  exit 1
fi

# load .env
if [ -f .env ]
then
  # exclude WELCOME_MESSAGE && WELCOME_FOOTER because it may contain invalid characters
  export $(cat .env | sed 's/#.*//g' | grep -v "WELCOME_FOOTER" | grep -v "WELCOME_MESSAGE" | xargs)
fi

ask_question () {
    local question=$1
    local current_value=$2
    local default_value=$3

    if [ "$current_value" == true ]; then
        question="${question} [${default_value}]: "
    else
        question="${question}: "
    fi

    return_value=""
    while [[ ! $return_value =~ ^(y|n)$ ]]; do
        read -p "$question" return_value
        if [ "$current_value" == true ] && [ "$return_value" == "" ]; then
            return_value="${default_value}"
        fi
    done
}

ask_question "Should Greenlight frontend be included? (y/n)" $ENABLE_GREENLIGHT "y"
greenlight=$return_value

ask_question "Should an automatic HTTPS Proxy be included? (y/n)" $ENABLE_HTTPS_PROXY "y"
https_proxy=$return_value

ask_question "Should a Demo be included? (y/n)" $ENABLE_DEMO "y"
demo=$return_value

ask_question "Should the WebHooks API be included? (y/n)" $ENABLE_WEBHOOKS "y"
webhooks=$return_value

if [ "$https_proxy" == "y" ]
then
    ask_question "Should a coturn server be included? (y/n)" $ENABLE_COTURN "y"
    coturn=$return_value
else
    coturn="n"
fi

ask_question "Should the Prometheus Exporter be included? (y/n)" $ENABLE_PROMETHEUS_EXPORTER "y"
prometheus=$return_value

if [ -z "$DOMAIN" ]; then
    DOMAIN=""
    while [[ -z "$DOMAIN" ]]; do
        read -p "Please enter the domain name: " DOMAIN
    done
else
    NEW_DOMAIN=""
    while [[ -z "$NEW_DOMAIN" ]]; do
        read -p "Please enter the domain name [${DOMAIN}]: " NEW_DOMAIN
        if [ "$NEW_DOMAIN" == "" ]; then
            NEW_DOMAIN="${DOMAIN}"
        fi
    done
    DOMAIN="${NEW_DOMAIN}"
fi

if [ -z "$EXTERNAL_IPv4" ]; then
    CURRENT_EXTERNAL_IPv4=$(curl -4 -s https://icanhazip.com)

    ask_question "Is $CURRENT_EXTERNAL_IPv4 your external IPv4 address? (y/n)" false "y"
    ip_correct=$return_value

    if [ "$ip_correct" == "y" ]; then
        EXTERNAL_IPv4=$CURRENT_EXTERNAL_IPv4
    fi
else
    ask_question "Is $EXTERNAL_IPv4 still your external IPv4 address? (y/n)" true "y"
    ip_correct=$return_value
fi

if [ ! "$ip_correct" == "y" ]; then
    EXTERNAL_IPv4=""
    while [[ ! $EXTERNAL_IPv4 =~ ^[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}$ ]]; do
        read -p "Please enter correct IPv4 address: " EXTERNAL_IPv4
    done
fi

if [ -z "$EXTERNAL_IPv6" ]; then
    CURRENT_EXTERNAL_IPv6=$(curl -6 -s https://icanhazip.com || true)

    ask_question "Is $CURRENT_EXTERNAL_IPv6 your external IPv6 address? (y/n)" false "y"
    ip_correct=$return_value

    if [ "$ip_correct" == "y" ]; then
        EXTERNAL_IPv6=$CURRENT_EXTERNAL_IPv6
    fi
else
    ask_question "Is $EXTERNAL_IPv6 still your external IPv6 address? (y/n)" true "y"
    ip_correct=$return_value
fi

if [ ! "$ip_correct" == "y" ]; then
    EXTERNAL_IPv6=""
    while [[ ! $EXTERNAL_IPv6 =~ ^[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}$ ]]; do
        read -p "Please enter correct IPv6 address: " EXTERNAL_IPv6
    done
fi

ask_question "Do you want to build the environment in development mode? (y/n)" $DEV_MODE "y"
devmode=$return_value


# write settings
echo "--------------------------------------------------"
echo "Setup environment..."
if [ -f .env ]; then
    cp .env .env_backup
fi

cp sample.env .env
sed -i '' -e "s/EXTERNAL_IPv4=.*/EXTERNAL_IPv4=$EXTERNAL_IPv4/" .env
sed -i '' -e "s/EXTERNAL_IPv6=.*/EXTERNAL_IPv6=$EXTERNAL_IPv6/" .env
sed -i '' -e "s/DOMAIN=.*/DOMAIN=$DOMAIN/" .env

if [ ! "$devmode" == "y" ]; then
    echo "Dev-mode disabled"
    sed -i '' -e "s/.*DEV_MODE.*/#DEV_MODE=true/" .env
    sed -i '' -e "s/CERTIFICATE_DOMAINS=.*/CERTIFICATE_DOMAINS=$DOMAIN/" .env
    sed -i '' -e "s#GREENLIGHT_ENDPOINT=.*#GREENLIGHT_ENDPOINT=https://$DOMAIN/bigbluebutton/api#" .env
else
    echo "Dev-mode enabled"
    sed -i '' -e "s/.*DEV_MODE.*/DEV_MODE=true/" .env
    sed -i '' -e "s/CERTIFICATE_DOMAINS=.*/CERTIFICATE_DOMAINS=invalid/" .env
    sed -i '' -e "s#GREENLIGHT_ENDPOINT=.*#GREENLIGHT_ENDPOINT=http://10.7.7.1:8080/bigbluebutton/api/#" .env
fi

if [ ! -z "$EXTERNAL_IPv6" ]; then
    sed -i '' -e "s/HTTPS_SITE_FILE=.*/HTTPS_SITE_FILE=site.conf/" .env
else
    sed -i '' -e "s/HTTPS_SITE_FILE=.*/HTTPS_SITE_FILE=site-ipv4only.conf/" .env
fi

cat conf/setup/docker-compose.init.yml > docker-compose.override.yml

if [ ! "$greenlight" == "y" ]; then
    echo "Greenlight disabled"
    sed -i '' -e "s/.*ENABLE_GREENLIGHT.*/#ENABLE_GREENLIGHT=true/" .env
else
    echo "Greenlight enabled"
    sed -i '' -e "s/.*ENABLE_GREENLIGHT.*/ENABLE_GREENLIGHT=true/" .env
    cat conf/setup/docker-compose.greenlight.yml >> docker-compose.override.yml
fi

if [ ! "$demo" == "y" ]
then
    echo "Demo disabled"
    sed -i '' -e "s/.*ENABLE_DEMO.*/#ENABLE_DEMO=true/" .env
else
    echo "Demo enabled"
    sed -i '' -e "s/.*ENABLE_DEMO.*/ENABLE_DEMO=true/" .env
    cat conf/setup/docker-compose.demo.yml >> docker-compose.override.yml
fi

if [ ! "$webhooks" == "y" ]
then
    echo "WebHooks API disabled"
    sed -i '' -e "s/.*ENABLE_WEBHOOKS.*/#ENABLE_WEBHOOKS=true/" .env
else
    echo "WebHooks API enabled"
    sed -i '' -e "s/.*ENABLE_WEBHOOKS.*/ENABLE_WEBHOOKS=true/" .env
    cat conf/setup/docker-compose.webhooks.yml >> docker-compose.override.yml
fi

if [ ! "$prometheus" == "y" ]
then
    echo "Prometheus Exporter disabled"
    sed -i '' -e "s/.*ENABLE_PROMETHEUS_EXPORTER.*/#ENABLE_PROMETHEUS_EXPORTER=true/" .env
else
    echo "Prometheus Exporter enabled"
    sed -i '' -e "s/.*ENABLE_PROMETHEUS_EXPORTER.*/ENABLE_PROMETHEUS_EXPORTER=true/" .env
    cat conf/setup/docker-compose.prometheus.yml >> docker-compose.override.yml
fi

if [ ! "$https_proxy" == "y" ]
then
    echo "HTTPS Proxy disabled"
    sed -i '' -e "s/.*ENABLE_HTTPS_PROXY.*/#ENABLE_HTTPS_PROXY=true/" .env
else
    echo "HTTPS Proxy enabled"
    sed -i '' -e "s/.*ENABLE_HTTPS_PROXY.*/ENABLE_HTTPS_PROXY=true/" .env
    cat conf/setup/docker-compose.https.yml >> docker-compose.override.yml
fi

if [ "$coturn" == "y" ]
then
    echo "coturn server enabled"
    sed -i '' -e "s/.*ENABLE_COTURN.*/ENABLE_COTURN=true/" .env
    sed -i '' -e "s/.*TURN_SERVER=.*/TURN_SERVER=turns:$DOMAIN:465?transport=tcp/" .env
    if [ "$TURN_SECRET" == "" ]; then
        echo "Generate new coturn secret"
        TURN_SECRET=$(head /dev/urandom | LC_ALL=C tr -dc A-Za-f0-9 | head -c 32)
    fi
    sed -i '' -e "s/.*TURN_SECRET=.*/TURN_SECRET=$TURN_SECRET/" .env
    sed -i '' -e "s/.*STUN_IP=.*/STUN_IP=$EXTERNAL_IPv4/" .env
    cat conf/setup/docker-compose.coturn.yml >> docker-compose.override.yml
else
    echo "coturn server enabled"
    sed -i '' -e "s/.*ENABLE_COTURN.*/#ENABLE_COTURN=true/" .env
    sed -i '' -e "s/.*TURN_SERVER=.*/#TURN_SERVER=turns:turn.example.com:443?transport=tcp/" .env
    sed -i '' -e "s/.*TURN_SECRET=.*/#TURN_SECRET=/" .env
    sed -i '' -e "s/.*STUN_IP=.*/STUN_IP=216.93.246.18/" .env
fi

if [ "$https_proxy" == "y" ]
then
    cat conf/setup/docker-compose.ssldata-vol.yml >> docker-compose.override.yml
fi

# change secrets

if [ "$SHARED_SECRET" == "" ]; then
    echo "Generate new shared secret"
    SHARED_SECRET=$(head /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c 40)
fi
sed -i '' -e "s/SHARED_SECRET=.*/SHARED_SECRET=$SHARED_SECRET/" .env

if [ "$ETHERPAD_API_KEY" == "" ]; then
    echo "Generate new Etherpad API key"
    ETHERPAD_API_KEY=$(head /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c 40)
fi
sed -i '' -e "s/ETHERPAD_API_KEY=.*/ETHERPAD_API_KEY=$ETHERPAD_API_KEY/" .env

if [ "$RAILS_SECRET" == "" ]; then
    echo "Generate new rails secret"
    RAILS_SECRET=$(head /dev/urandom | LC_ALL=C tr -dc a-f0-9 | head -c 128)
fi
sed -i '' -e "s/RAILS_SECRET=.*/RAILS_SECRET=$RAILS_SECRET/" .env

echo "--------------------------------------------------"
echo "configuration file .env got successfully created!"
echo ""
echo "you can look through it for further adjusments"
echo "  $ nano .env"
echo ""
echo "to start bigbluebutton run"
echo "  $ docker-compose up -d"
